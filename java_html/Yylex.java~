/* The following code was generated by JFlex 1.4.3 on 13/12/17 09:50 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/12/17 09:50 from the specification file
 * <tt>java.jflex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\46\25\0\1\32\1\42\1\34\2\0\1\45\1\44\3\0"+
    "\1\40\1\40\1\0\1\40\1\33\1\40\12\37\2\0\1\42\1\41"+
    "\1\42\2\0\22\36\1\26\7\36\4\0\1\35\1\0\1\16\1\17"+
    "\1\15\1\13\1\6\1\3\1\24\1\5\1\2\1\36\1\21\1\10"+
    "\1\30\1\7\1\14\1\25\1\36\1\20\1\11\1\4\1\22\1\23"+
    "\1\12\1\36\1\27\1\36\1\0\1\43\55\0\1\1\12\0\1\1"+
    "\4\0\1\1\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1"+
    "\16\0\5\1\7\0\1\1\1\0\1\1\201\0\5\1\1\0\2\1"+
    "\2\0\4\1\10\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1"+
    "\1\0\123\1\1\0\213\1\10\0\236\1\11\0\46\1\2\0\1\1"+
    "\7\0\47\1\110\0\33\1\5\0\3\1\55\0\53\1\25\0\12\31"+
    "\4\0\2\1\1\0\143\1\1\0\1\1\17\0\2\1\7\0\2\1"+
    "\12\31\3\1\2\0\1\1\20\0\1\1\1\0\36\1\35\0\131\1"+
    "\13\0\1\1\16\0\12\31\41\1\11\0\2\1\4\0\1\1\5\0"+
    "\26\1\4\0\1\1\11\0\1\1\3\0\1\1\27\0\31\1\107\0"+
    "\1\1\1\0\13\1\127\0\66\1\3\0\1\1\22\0\1\1\7\0"+
    "\12\1\4\0\12\31\1\0\7\1\1\0\7\1\5\0\10\1\2\0"+
    "\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4\1\3\0"+
    "\1\1\20\0\1\1\15\0\2\1\1\0\3\1\4\0\12\31\2\1"+
    "\23\0\6\1\4\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\37\0\4\1\1\0\1\1\7\0\12\31"+
    "\2\0\3\1\20\0\11\1\1\0\3\1\1\0\26\1\1\0\7\1"+
    "\1\0\2\1\1\0\5\1\3\0\1\1\22\0\1\1\17\0\2\1"+
    "\4\0\12\31\25\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1"+
    "\1\0\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0\3\1"+
    "\4\0\12\31\1\0\1\1\21\0\1\1\1\0\6\1\3\0\3\1"+
    "\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1"+
    "\3\0\3\1\3\0\14\1\26\0\1\1\25\0\12\31\25\0\10\1"+
    "\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1"+
    "\32\0\2\1\6\0\2\1\4\0\12\31\25\0\10\1\1\0\3\1"+
    "\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0\1\1"+
    "\1\0\2\1\4\0\12\31\1\0\2\1\22\0\10\1\1\0\3\1"+
    "\1\0\51\1\2\0\1\1\20\0\1\1\21\0\2\1\4\0\12\31"+
    "\12\0\6\1\5\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1"+
    "\2\0\7\1\72\0\60\1\1\0\2\1\14\0\7\1\11\0\12\31"+
    "\47\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1"+
    "\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\2\0\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1"+
    "\1\0\1\1\11\0\12\31\2\0\4\1\40\0\1\1\37\0\12\31"+
    "\26\0\10\1\1\0\44\1\33\0\5\1\163\0\53\1\24\0\1\1"+
    "\12\31\6\0\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0"+
    "\3\1\4\0\15\1\14\0\1\1\1\0\12\31\6\0\46\1\1\0"+
    "\1\1\5\0\1\1\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\51\1\1\0\4\1\2\0"+
    "\41\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
    "\17\1\1\0\71\1\1\0\4\1\2\0\103\1\45\0\20\1\20\0"+
    "\125\1\14\0\u026c\1\2\0\21\1\1\0\32\1\5\0\113\1\25\0"+
    "\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0"+
    "\3\1\17\0\64\1\43\0\1\1\4\0\1\1\3\0\12\31\46\0"+
    "\12\31\6\0\130\1\10\0\51\1\1\0\1\1\5\0\106\1\12\0"+
    "\35\1\51\0\12\31\36\1\2\0\5\1\13\0\54\1\25\0\7\1"+
    "\10\0\12\31\46\0\27\1\11\0\65\1\53\0\12\31\6\0\12\31"+
    "\15\0\1\1\135\0\57\1\21\0\7\1\4\0\12\31\51\0\36\1"+
    "\15\0\2\1\12\31\54\1\32\0\44\1\34\0\12\31\3\0\3\1"+
    "\12\31\44\1\153\0\4\1\1\0\4\1\3\0\2\1\11\0\300\1"+
    "\100\0\u0116\1\2\0\6\1\2\0\46\1\2\0\6\1\2\0\10\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\37\1\2\0\65\1"+
    "\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1"+
    "\2\0\6\1\4\0\15\1\5\0\3\1\1\0\7\1\164\0\1\1"+
    "\15\0\1\1\20\0\15\1\145\0\1\1\4\0\1\1\2\0\12\1"+
    "\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1"+
    "\64\0\2\1\u0a7b\0\57\1\1\0\57\1\1\0\205\1\6\0\4\1"+
    "\3\0\2\1\14\0\46\1\1\0\1\1\5\0\1\1\2\0\70\1"+
    "\7\0\1\1\20\0\27\1\11\0\7\1\1\0\7\1\1\0\7\1"+
    "\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1"+
    "\120\0\1\1\u01d5\0\2\1\52\0\5\1\5\0\2\1\4\0\126\1"+
    "\6\0\3\1\1\0\132\1\1\0\4\1\5\0\51\1\3\0\136\1"+
    "\21\0\33\1\65\0\20\1\u0200\0\u19b6\1\112\0\u51cd\1\63\0\u048d\1"+
    "\103\0\56\1\2\0\u010d\1\3\0\20\1\12\31\2\1\24\0\57\1"+
    "\20\0\31\1\10\0\106\1\61\0\11\1\2\0\147\1\2\0\4\1"+
    "\1\0\4\1\14\0\13\1\115\0\12\1\1\0\3\1\1\0\4\1"+
    "\1\0\27\1\35\0\64\1\16\0\62\1\34\0\12\31\30\0\6\1"+
    "\3\0\1\1\4\0\12\31\34\1\12\0\27\1\31\0\35\1\7\0"+
    "\57\1\34\0\1\1\12\31\46\0\51\1\27\0\3\1\1\0\10\1"+
    "\4\0\12\31\6\0\27\1\3\0\1\1\5\0\60\1\1\0\1\1"+
    "\3\0\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1"+
    "\2\0\13\1\7\0\3\1\14\0\6\1\2\0\6\1\2\0\6\1"+
    "\11\0\7\1\1\0\7\1\221\0\43\1\15\0\12\31\6\0\u2ba4\1"+
    "\14\0\27\1\4\0\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1"+
    "\14\0\5\1\5\0\1\1\1\0\12\1\1\0\15\1\1\0\5\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1"+
    "\22\0\100\1\2\0\66\1\50\0\14\1\164\0\5\1\1\0\207\1"+
    "\23\0\12\31\7\0\32\1\6\0\32\1\13\0\131\1\3\0\6\1"+
    "\2\0\6\1\2\0\6\1\2\0\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\23\1\1\2\1\1\2\3\2\1\1\3\1\4"+
    "\1\5\1\6\13\5\1\6\12\5\1\0\1\7\1\0"+
    "\45\5\1\6\6\5\5\0\1\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\47\0\u035a"+
    "\0\u0381\0\u03a8\0\u03cf\0\47\0\303\0\303\0\u03f6\0\u041d"+
    "\0\u0444\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555"+
    "\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d"+
    "\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\47\0\u0777\0\u079e"+
    "\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6"+
    "\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e"+
    "\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46"+
    "\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\u0c57\0\u0c7e"+
    "\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6"+
    "\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee"+
    "\0\u0eee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\6\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\6\1\21\1\22\1\6\1\23\1\24\2\6\1\25"+
    "\2\2\1\26\2\6\1\25\1\27\2\30\1\31\1\32"+
    "\1\33\1\34\51\0\1\35\1\36\3\35\1\37\20\35"+
    "\1\40\4\0\3\35\11\0\6\35\1\41\3\35\1\42"+
    "\14\35\4\0\3\35\11\0\3\35\1\43\23\35\4\0"+
    "\3\35\11\0\27\35\4\0\3\35\11\0\6\35\1\44"+
    "\20\35\4\0\3\35\11\0\12\35\1\45\14\35\4\0"+
    "\3\35\11\0\1\46\1\35\1\47\5\35\1\50\16\35"+
    "\4\0\3\35\11\0\3\35\1\51\23\35\4\0\3\35"+
    "\11\0\12\35\1\52\14\35\4\0\3\35\11\0\20\35"+
    "\1\37\6\35\4\0\3\35\11\0\3\35\1\53\2\35"+
    "\1\54\5\35\1\44\12\35\4\0\3\35\11\0\15\35"+
    "\1\55\11\35\4\0\3\35\11\0\16\35\1\56\10\35"+
    "\4\0\3\35\11\0\4\35\1\57\22\35\4\0\3\35"+
    "\11\0\5\35\1\60\21\35\4\0\3\35\11\0\12\35"+
    "\1\61\14\35\4\0\3\35\11\0\16\35\1\62\1\35"+
    "\1\63\6\35\4\0\3\35\11\0\25\35\1\64\1\35"+
    "\4\0\3\35\40\0\1\25\5\0\1\25\10\0\30\65"+
    "\3\0\1\66\1\0\1\65\51\0\1\27\50\0\1\27"+
    "\47\0\1\27\47\0\1\67\3\0\2\35\1\36\24\35"+
    "\4\0\3\35\11\0\23\35\1\70\3\35\4\0\3\35"+
    "\11\0\12\35\1\71\14\35\4\0\3\35\11\0\16\35"+
    "\1\36\10\35\4\0\3\35\11\0\4\35\1\72\22\35"+
    "\4\0\3\35\11\0\7\35\1\73\17\35\4\0\3\35"+
    "\11\0\5\35\1\74\21\35\4\0\3\35\11\0\22\35"+
    "\1\75\4\35\4\0\3\35\11\0\14\35\1\76\12\35"+
    "\4\0\3\35\11\0\1\77\26\35\4\0\3\35\11\0"+
    "\1\100\26\35\4\0\3\35\11\0\20\35\1\101\6\35"+
    "\4\0\3\35\11\0\14\35\1\42\12\35\4\0\3\35"+
    "\11\0\14\35\1\102\12\35\4\0\3\35\11\0\7\35"+
    "\1\103\17\35\4\0\3\35\11\0\4\35\1\104\22\35"+
    "\4\0\3\35\11\0\2\35\1\105\24\35\4\0\3\35"+
    "\11\0\1\106\26\35\4\0\3\35\11\0\1\107\26\35"+
    "\4\0\3\35\11\0\1\110\11\35\1\111\14\35\4\0"+
    "\3\35\11\0\15\35\1\112\11\35\4\0\3\35\11\0"+
    "\7\35\1\113\17\35\4\0\3\35\10\0\30\65\1\0"+
    "\1\65\1\0\1\66\1\0\1\65\56\0\1\2\2\0"+
    "\12\35\1\114\14\35\4\0\3\35\11\0\14\35\1\37"+
    "\12\35\4\0\3\35\11\0\5\35\1\36\21\35\4\0"+
    "\3\35\11\0\4\35\1\36\22\35\4\0\3\35\11\0"+
    "\22\35\1\36\4\35\4\0\3\35\11\0\5\35\1\115"+
    "\21\35\4\0\3\35\11\0\2\35\1\116\24\35\4\0"+
    "\3\35\11\0\2\35\1\117\24\35\4\0\3\35\11\0"+
    "\6\35\1\73\20\35\4\0\3\35\11\0\15\35\1\100"+
    "\11\35\4\0\3\35\11\0\7\35\1\120\17\35\4\0"+
    "\3\35\11\0\2\35\1\121\24\35\4\0\3\35\11\0"+
    "\14\35\1\122\12\35\4\0\3\35\11\0\20\35\1\123"+
    "\6\35\4\0\3\35\11\0\7\35\1\124\17\35\4\0"+
    "\3\35\11\0\11\35\1\36\15\35\4\0\3\35\11\0"+
    "\5\35\1\125\13\35\1\126\5\35\4\0\3\35\11\0"+
    "\2\35\1\127\24\35\4\0\3\35\11\0\6\35\1\116"+
    "\20\35\4\0\3\35\11\0\2\35\1\130\24\35\4\0"+
    "\3\35\11\0\16\35\1\131\10\35\4\0\3\35\11\0"+
    "\4\35\1\107\22\35\4\0\3\35\11\0\1\132\26\35"+
    "\4\0\3\35\11\0\13\35\1\133\13\35\4\0\3\35"+
    "\11\0\7\35\1\36\17\35\4\0\3\35\11\0\16\35"+
    "\1\134\10\35\4\0\3\35\11\0\17\35\1\36\7\35"+
    "\4\0\3\35\11\0\16\35\1\72\10\35\4\0\3\35"+
    "\11\0\1\46\26\35\4\0\3\35\11\0\2\35\1\135"+
    "\24\35\4\0\3\35\11\0\14\35\1\136\12\35\4\0"+
    "\3\35\11\0\4\35\1\137\22\35\4\0\3\35\11\0"+
    "\4\35\1\140\22\35\4\0\3\35\11\0\2\35\1\141"+
    "\24\35\4\0\3\35\11\0\13\35\1\36\13\35\4\0"+
    "\3\35\11\0\3\35\1\36\23\35\4\0\3\35\11\0"+
    "\14\35\1\142\12\35\4\0\3\35\11\0\6\35\1\72"+
    "\20\35\4\0\3\35\11\0\2\35\1\73\24\35\4\0"+
    "\3\35\11\0\13\35\1\143\13\35\4\0\3\35\11\0"+
    "\26\35\1\36\4\0\3\35\11\0\27\35\1\0\1\144"+
    "\2\0\3\35\11\0\13\35\1\37\13\35\4\0\3\35"+
    "\11\0\2\35\1\115\24\35\4\0\3\35\10\0\30\145"+
    "\5\0\1\145\11\0\30\145\2\0\1\146\2\0\1\145"+
    "\11\0\30\147\5\0\1\147\11\0\30\147\2\0\1\150"+
    "\2\0\1\147\11\0\30\151\5\0\1\151\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3861];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\1\11\4\1\1\11\30\1\1\0"+
    "\1\11\1\0\54\1\5\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1694) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { System.out.println("STRING "+yytext());
          }
        case 9: break;
        case 3: 
          { System.out.println("OPE "+yytext());
          }
        case 10: break;
        case 6: 
          { System.out.println("KEY "+yytext());
          }
        case 11: break;
        case 1: 
          { ;
          }
        case 12: break;
        case 8: 
          { System.out.println("IMPORT "+yytext());
          }
        case 13: break;
        case 4: 
          { System.out.print(yytext());
          }
        case 14: break;
        case 5: 
          { System.out.println("ID "+yytext());
          }
        case 15: break;
        case 2: 
          { System.out.println("INT "+yytext());
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          scanner = new Yylex( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
